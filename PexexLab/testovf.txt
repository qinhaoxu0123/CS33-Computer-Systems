Qinhao Xu
UID:704439324

flag:
-O2

0000000000000000 <testovf>:
   0:   31 c0                   xor    %eax,%eax
   2:   c3                      retq

when I used the flag -O2, the compiler has compiled with optimization, which means that the compiler simply know that there is a integer overflow when we compute n + 9223372036854775807 < n, it will always return o or false in this case.

-O2 and -fwrapv
0000000000000000 <testovf>:
   0:   48 b8 ff ff ff ff ff    movabs $0x7fffffffffffffff,%rax
   7:   ff ff 7f
   a:   48 01 f8                add    %rdi,%rax
   d:   48 39 f8                cmp    %rdi,%rax
  10:   0f 9c c0                setl   %al
  13:   c3                      retq
This fwrapv flag means when there is a integer overflow and cause that number to wrap around. In this assembly, we see that the intermediate value stored in the %rax and the summation of the 9223372036854775807 and n stored in the %rax, the next step is cmp the %rax and %rdi, it will wrap around the number and produces the small number, which essentially will cause the function always return true or one. In short, this command will wrap the number to a small number when there is a integer overflow. The assembly code is the direct translation of the source code.



0000000000000000 <testovf>:
   0:   55                      push   %rbp
   1:   53                      push   %rbx
   2:   48 ba ff ff ff ff ff    movabs $0x7fffffffffffffff,%rdx
   9:   ff ff 7f
   c:   48 89 fd                mov    %rdi,%rbp
   f:   48 89 fb                mov    %rdi,%rbx
  12:   48 83 ec 08             sub    $0x8,%rsp
  16:   48 01 d5                add    %rdx,%rbp
  19:   70 0d                   jo     28 <testovf+0x28>
  1b:   48 39 eb                cmp    %rbp,%rbx
  1e:   0f 9f c0                setg   %al
  21:   48 83 c4 08             add    $0x8,%rsp
  25:   5b                      pop    %rbx
  26:   5d                      pop    %rbp
  27:   c3                      retq
  28:   48 89 fe                mov    %rdi,%rsi
  2b:   bf 00 00 00 00          mov    $0x0,%edi
  30:   e8 00 00 00 00          callq  35 <testovf+0x35>
  35:   eb e4                   jmp    1b <testovf+0x1b>


In this code, we can see that when the program being executed, it push the %rbp and %rbx registers into the stack frame, it also stores the $0x7fffffffffffffff into the %rdx, and then add the %rdx with the number $0x7fffffffffffffff into the register %rbp, and the with the jo, means that if there is integer overflow after the addition, it will jump to the OX28 register, in the following code 
  28:   48 89 fe                mov    %rdi,%rsi
  2b:   bf 00 00 00 00          mov    $0x0,%edi
  30:   e8 00 00 00 00          callq  35 <testovf+0x35>
  35:   eb e4                   jmp    1b <testovf+0x1b>
Alternative version:

.cfi_restore_state
movq    %rbx, %rsi
movl    $.Lubsan_data1, %edi
call    __ubsan_handle_add_overflow
jmp     .L2

the above code will first move whatever in the %rdi to the %rsi and will call the  call    __ubsan_handle_add_overflow to handle integer overflow and continue jump back to the  jmp    1b <testovf+0x1b> and continue the execution. If no integer overflow after the addition then it will continual to execute the program normally.   




 