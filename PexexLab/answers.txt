Qinhao Xu
UID:704439324

1.
The correct mathematical result is in a 64 bits unsigned number, in this case, the overflows in a 64 bit 2’s complement system.
The following instructions:

547920	48 8d 04 ad 02 00 00 00	lea    0x0(,%rbp,4),%rax
when %rbp=0xdfffffffdceaced0 is being executed, which it will multiply by 4 and cause overflow.

2.
from the data.c, the following is the description of the most-negative-fixnum:
DEFVAR_LISP ("most-negative-fixnum", Vmost_negative_fixnum,
               doc: /* The smallest value that is representable in a Lisp integ\
er.  */);
  Vmost_negative_fixnum = make_number (MOST_NEGATIVE_FIXNUM);
  XSYMBOL (intern_c_string ("most-negative-fixnum"))->constant = 1;
}

from the lisp.h
#define MOST_NEGATIVE_FIXNUM (-1 - MOST_POSITIVE_FIXNUM)

since we compiled with emacs for x86-64, 
EMACS_INT_MIN is defined as LONG_MIN, which is 0x8000000000000000
so if we subtract LONG_MIN by 1, we will get -2305843009213693951

3.
In data.c, if there is a multiplication overflows, the function will mask the result with the INTMASK
    case Amult:
    case Adiv:
      accum = 1;
      break;
    case Amult:
      overflow |= INT_MULTIPLY_WRAPV (accum, next, &accum);
 case Amult:
          accum *= next;
  XSETINT (val, accum);
  return val;

#define INTMASK (EMACS_INT_MAX >> (INTTYPEBITS - 1))
which is ox3fffffffffffffff

since the multiplication is between two most-postive-fixnum, as the result it will over flow.

4.
When we run it with -fwrapv, the compiler will give us the wrong result, since wrapv automatically discards bits that exceed the limit of 64bit, so we will not getting at the end.

5.
when there is a crash in the problem, in this case I used the backtrace to output the stack frame with the address space of various function on it. And then I used the set several breakpoints in the first few function call. When i set the breakpoint for the function emacs_setzen, the bug occurs in the strcpy in the editfns.c when I run the GDB in lnxsrv09, as following  

2428	      strcpy (tzval + tzeqlen, tzstring);
(gdb) print tzval
$4 = 0x1483650 ‘TZ=’ 
(gdb) print tzeqlen
$5 = tzeqlen
(gdb) p/d tzeqlen
$7 = 3
(gdb) print tzstring
$3 = 0x1483259 'X' <repeats 200 times>
(gdb) x/c 0x1483650
0x1483650:	84 ’T’
(gdb) x/c 0x1483651
0x1483651:	90 ‘Z’
(gdb) x/c 0x1483652
0x1483652:	61 ‘=‘
(gdb) x/c 0x1483653
0x1483653:	0 ‘\000‘

this strcpy means that you copy tzstring copy into the destination tzval + tzeqlen , however when I printed the address of the tzval and tzeqlen with the value, and then i used p/d to examine the tzeqlen size, which I added this value to the (gdb) print tzval
$4 = 0x1483650 ‘TZ=’ and it become the address 0x1483653. Finally, i used the the x/d to examine the address, in this case, I have 0 in this ascii, which mean that it has a null value in the destination, which causes the problem to crash in this case. 




